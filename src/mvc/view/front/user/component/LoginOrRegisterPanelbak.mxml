<?xml version="1.0" encoding="utf-8"?>
<mx:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/halo" 
		   xmlns:mx="library://ns.adobe.com/flex/mx"
		   name="登陆"
		   width="100%" height="100%" layout="vertical" verticalGap="0"
		   initialize="module1_initializeHandler(event)" fontSize="13"
		   creationComplete="module1_creationCompleteHandler(event)"
		   removed="module1_removeHandler(event)" xmlns:common="minn.common.*" xmlns:s1="library://ns.adobe.com/flex/spark" >
	<fx:Style source="assets/css/app_css.css"/>
	<fx:Script source="../../../../../mvc/base/FrontBaseImport.as"/>
	<fx:Script>
		<![CDATA[
			import flexmdi.containers.PopWin;
			import flexmdi.events.winresize.WinResizeProxyEvent;
			
			import minn.message.Message;
			
			import mvc.controller.ControllerCommand;
			import mvc.controller.ControllerService;
			import mvc.model.user.UserProxy;
			import mvc.model.user.vo.User;
			import mvc.view.front.user.event.UserEvent;
			
			import mx.events.ValidationResultEvent;
			import mx.validators.Validator;
			
			import skin.ButtonSkin;
			import skin.ShopCardBtn;
			
			
			[Bindable]
			private var user:User=null;
			
			private var userProxy:UserProxy=null;
//			private var appFacade:ApplicationFacade= ApplicationFacade.getInstance();
			protected function module1_initializeHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
//				Alert.show("panel:"+this.parent.toString());
				MinnMessageEventManager.getInstance().addEventListener(this.parent.toString()+MinnMessageEvent.CREATIONCOMPLETE_MESSAGE,messageHandler);
//				MinnMessageEventManager.getDisp().addEventListener(this.parent.toString()+MinnMessageEvent.CREATIONCOMPLETE_MESSAGE,messageHandler);
			}
			protected function module1_removeHandler(event:Event):void
			{
				// TODO Auto-generated method stub
				//MessageEventManager.getInstance().removeEventListener(this.parentDocument.toString()+MessageEvent.CREATIONCOMPLETE_MESSAGE,messageHandler);
			}
			
			protected function module1_creationCompleteHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				
//				appFacade.startup(this);
//				appFacade=FrontAppFacade.getInstance();
//				Alert.show((appFacade==null).toString());
//				Alert.show(user.userName_ch);
				if(user!=null){
				userName_ch_id.text=user.userName_ch;
				userName_en_id.text=user.userName_en;
				password_id.text=user.password;
				email_id.text=user.email;
				qq_msn_id.text=user.qq_msn;
				}
//				appFacade.startup(FrontAppCommand.FRONT_USER_STARTUP,this);
			}
			private function messageHandler(e:MinnMessageEvent):void{
//				Alert.show(e.data.toString());
				var type:String=e.data.type;
//				if(e.data.type=="modify")
                     
				if(e.data.hasOwnProperty("item")){
				    user=e.data.item as User;
					
				}
					currentState=type;
					if(currentState=="Register")
					    (parent.parent as PopWin).title='注册';
					else if(currentState=="modify"){
						(parent.parent as PopWin).title='修改';
					}else if(currentState=="backUser"){
						(parent.parent as PopWin).title='找回密码';
					}else{
						(parent.parent as PopWin).title='登录';
					}
//				}
			}
			private function click_Handler():void{
			
//				Alert.show(this.parent.parent.toString());
				var validatorErrorArray:Array = Validator.validateAll(validatorArray); 
				var err:ValidationResultEvent; 
				var errorMessageArray:Array = []; 
				if(validatorErrorArray.length>0){
					for each (err in validatorErrorArray) { 
						errorMessageArray.push(err.message); 
					} 
					
					if(errorMessageArray.length >0){
						Alert.show(errorMessageArray.join("\n\n"), "请按照以下错误提示信息重新填写", Alert.OK);
						
						return;
					}
				}
				
				if(userProxy==null)
					userProxy=ControllerService.getInstance(ControllerCommand.USER_PROXY);
				if(currentState=='Register'){
//					 user = new User(userName.text,pwd.text);
//					TitleWindowSkin(this.parentDocument).parent.width=500;
//					Alert.show(TitleWindowSkin(this.parentDocument).parent.width.toString());
					if(password_id.text!=confirm_id.text){
						Alert.show("确认密码不正确!","提示");
						confirm_id.text="";
						password_id.text="";
						return;
					}
					user=new User();
					user._sid=this.parentApplication.PRIVATEKEY;
					user.userName_ch=userName_ch_id.text;
					user.userName_en=userName_en_id.text;
					user.password=password_id.text;
					user.email=email_id.text;
					user.qq_msn=qq_msn_id.text;
					user.backemail=bakemail_id.text;
					userProxy.add(user,addResultHandler);
//					Alert.show("注册");
				}else if(currentState=='backUser'){
				   Alert.show("backuser");
				}else if(currentState=='modify'){
					user=new User();
					user._sid=this.parentApplication.PRIVATEKEY;
					user.id=this.parentApplication.user.id;
					user.userName_ch=userName_ch_id.text;
					user.userName_en=userName_en_id.text;
					user.password=password_id.text;
					user.email=email_id.text;
					user.qq_msn=qq_msn_id.text;
					userProxy.modify(user,modifyResultHandler);
				}
				else{
//					user = new User(userName.text,pwd.text);
//					Alert.show('登录:'+userName_en.text);
					user=new User();
//					user.userName_ch=userName_ch.text;
					user._sid=this.parentApplication.PRIVATEKEY;
					user.userName_en=userName_en_id.text;
					user.password=password_id.text;
					userProxy.login(user,loginResultHandler);
					
//					Alert.show('登录');
//					var d:title
//					var d:TitleWindowSkin
//					Alert.show(TitleWindowSkin(parentDocument).titleDisplay.text);
				}
			}

			private function addResultHandler(message:Message):void{
				Alert.show(message.messageBody);
				this.dispatchEvent(new CloseEvent(CloseEvent.CLOSE,true));
		
			}
			private function modifyResultHandler(message:Message):void{
				Alert.show(message.messageBody);
				this.parentDocument.user=user;
				this.dispatchEvent(new CloseEvent(CloseEvent.CLOSE,true));
				
			}
		    private function loginResultHandler(message:Message):void{
				if(user==null)
					user=new User();
//				Alert.show(message.otherInfo.toString());
				if(message.messageSucess==1){
					MinnUtil.propertyMap(message.messageBody,user);
					user.password='';
//					this.parentApplication.saveLocale(user,so_check_id.selected);
					this.dispatchEvent(new MinnMessageEvent(MinnMessageEvent.MESSAGE+"loginSucesses",user,true));
					this.dispatchEvent(new CloseEvent(CloseEvent.CLOSE,true));
				}else{
					Alert.show(message.messageBody);
				}
//				Alert.show(message.messageBody);
				this.dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
			}


			protected function userName_en_id_mouseOutHandler(event:FocusEvent):void
			{
				// TODO Auto-generated method stub
//				if(userName_en_id.text!="")
				if(userProxy==null)
					userProxy=ControllerService.getInstance(ControllerCommand.USER_PROXY);
					user=new User();
					if(userName_en_id.text!=''){
					user._sid=this.parentApplication.PRIVATEKEY;
					user.userName_en=userName_en_id.text;
					
					userProxy.userCheck(user,userCheckResultHandler);
				}
//					Alert.show("userName_en_id");
			}
			private function userCheckResultHandler(message:Message):void{
				
				if(message.messageSucess==0){
					Alert.show(message.messageBody,"提示");
					userName_en_id.text="";
				}
				
			}
			
			import mx.events.ValidationResultEvent;
			
			private function emailValidator_valid(evt:ValidationResultEvent):void {
//				textInput.errorString = "";
//				message.text = "";
//				Alert.show(textInput.text, "You entered a valid email address:");
				if(this.currentState=="Register"){
				if(email_id.text==""&&bakemail_id.text=="")
				    Alert.show(evt.message,"提示");
				return;
				}
				
			}
			
			private function emailValidator_invalid(evt:ValidationResultEvent):void {
//				textInput.errorString = evt.message;
//				message.text = evt.message;
//				if(evt.currentTarget.text!='')
				if(this.currentState=="Register"){
					if(email_id.text!=""&&bakemail_id.text!="")
						Alert.show(evt.message,"提示");
					return;
				}else 
				if(this.currentState=="modify"){
//					Alert.show(evt.message,"提示");
				}
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<fx:Array id="validatorArray">
			<mx:StringValidator id="userNameValidator"
								source="{userName_en_id}" includeIn="default,Register,modify"
								requiredFieldError="用户名不能为空！"
								property="text" 
								required="true" />
			<mx:StringValidator id="password_idValidator" includeIn="default,Register,modify"
								source="{password_id}" 
								requiredFieldError="密码不能为空！"
								property="text" 
								required="true" />
			<mx:StringValidator id="confirm_idValidator" includeIn="Register,modify"
								source="{confirm_id}" 
								requiredFieldError="确认密码不能为空！"
								property="text" 
								required="true" />
			<mx:StringValidator id="userName_ch_idValidator" includeIn="Register,modify"
								source="{userName_ch_id}"  
								requiredFieldError="昵称不能为空！"
								property="text" 
								required="true" />
			<mx:EmailValidator  id="email_idValidator" 
								source="{email_id}"  includeIn="Register,modify"
								requiredFieldError="email不能为空！"
								valid="emailValidator_valid(event)"
								invalid="emailValidator_invalid(event)"
								property="text" 
								required="true" />
			<mx:EmailValidator id="bakemail_idValidator" 
							   source="{bakemail_id}"  includeIn="Register,backUser"
							   requiredFieldError="找回密码email不能为空！"
							   valid.Register="emailValidator_valid(event)"
							   invalid.Register="emailValidator_invalid(event)"
							   property="text" 
							   required="true" />
		</fx:Array>

	</fx:Declarations>

	<mx:states>
		<mx:State name="default"/>    
		<mx:State name="Register"/>
		<mx:State name="modify"/>
		<mx:State name="backUser"/>
	</mx:states>
	
	<!-- Set title of the Panel container based on the view state.-->
	
		<mx:Form id="loginForm" width="100%" height="100%">  
			<mx:FormItem label="用户名:" includeIn="default,Register,modify">
				<mx:TextInput id="userName_en_id" text="minn" focusOut.Register="userName_en_id_mouseOutHandler(event)"/>
			</mx:FormItem>
			<mx:FormItem label="密      码:" includeIn="default,Register,modify" direction="horizontal">
					<mx:TextInput id="password_id" text="1234"  displayAsPassword="true"/><mx:Label text="密码由6~~8位的数字,字母或下划线组成"/>
			</mx:FormItem>
			<mx:FormItem  label="确认密码:" includeIn="Register,modify">
				<!-- Add a TextInput control to the form for the Register view state. -->     
				<mx:TextInput id="confirm_id"  displayAsPassword="true"/>
			</mx:FormItem>    
			<mx:FormItem label="昵称" includeIn="Register,modify" direction="horizontal">
				<mx:TextInput  id="userName_ch_id" />
			</mx:FormItem>
			<mx:FormItem  label="邮箱:" includeIn="Register,modify" direction="horizontal">
				<!-- Add a TextInput control to the form for the Register view state. -->     
					<mx:TextInput id="email_id"/><mx:Label text="联系时使用"/>
			</mx:FormItem>    
			<mx:FormItem label="QQ或MSN" includeIn="Register,modify">
				<mx:TextInput  id="qq_msn_id" />
			</mx:FormItem>
			<mx:FormItem  label="找回密码邮箱:" includeIn="Register,backUser" direction="horizontal">
				<!-- Add a TextInput control to the form for the Register view state. -->        
					<mx:TextInput id="bakemail_id"/><mx:Label text="该邮件找回密码时使用,请慎重填写!"/>
			</mx:FormItem>    
		</mx:Form>
	<mx:HBox width="100%" horizontalGap="10">
		<mx:Spacer width="35" id="spacer1"/>
		<!-- Set label of the control based on the view state.-->
		<mx:Spacer width="30" includeIn="Register"/>
		<mx:Spacer width="65" includeIn="modify"/>
		<mx:Spacer width="20" includeIn="default"/>
		<mx:Spacer width="25" includeIn="backUser"/>
		<common:MenuLabel text="找回密码?" includeIn="default,Register" click="currentState='backUser';(parent.parent as PopWin).title='找回密码';"/>
		<common:MenuLabel text="注册?" includeIn="default,backUser" click="currentState='Register';(parent.parent as PopWin).title='注册';"/>
		<common:MenuLabel text="登录?" includeIn="Register,backUser" click="currentState='default';(parent.parent as PopWin).title='登录';"/>
		<s1:Button id="loginButton" useHandCursor="true" buttonMode="true" skinClass="{skin.ShopCardBtn}"
				  label.default="登录"  label.modify="修改" label.Register="注册" label.backUser="找回密码" 
				  click="click_Handler()"/>
	</mx:HBox>
	<mx:Spacer height="10"/>
     <mx:transitions>
		 <mx:Transition fromState="*" toState="*">
			 <mx:Fade duration="800" alphaFrom="0" alphaTo="1" target="{loginForm}"/>
		 </mx:Transition>
	 </mx:transitions>
   
	
</mx:Module>
