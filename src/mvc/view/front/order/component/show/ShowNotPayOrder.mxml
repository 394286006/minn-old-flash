<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/halo" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" creationComplete="vbox1_creationCompleteHandler(event)">
	<fx:Script>
		<![CDATA[
			/**
			 * @author minn
			 * @QQ 394286006
			 * @email freemanfreelift@gmail.com
			 */
			import com.adobe.serialization.json.JSON;
			
			import minn.common.Entrypt;
			import minn.message.Message;
			import minn.proxy.WindowProxy;
			import minn.util.MinnUtil;
			
			import mvc.controller.ControllerCommand;
			import mvc.controller.ControllerService;
			import mvc.model.merchandise.vo.Product;
			import mvc.model.order.OrderProxy;
			import mvc.model.order.vo.Order;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			
			[Bindable]
			public var orders:ArrayCollection=new ArrayCollection();

			protected function vbox1_creationCompleteHandler(event:FlexEvent=null):void
			{
				// TODO Auto-generated method stub
				
				var condition:Object=new Object();
				condition.id=parentApplication.user.id;
				condition.ispay=0;
				var proxy:OrderProxy=ControllerService.getInstance(ControllerCommand.ORDER_PROXY);
				proxy.query(condition,queryOrderResultHandler);
			}
			private function queryOrderResultHandler(message:Message):void{
				orders.removeAll();
				var temp:Array=JSON.decode(message.messageBody) as Array;
				for(var i:int=0;i<temp.length;i++){
					var v:Order=new Order();
					orders.addItem(v);
				}
//				Alert.show(temp.length+'');
				MinnUtil.copyProperty(orders,temp);
			}
			public function detail_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
//				this.parentDocument.showOrderDetail(order_id.selectedItem as Order);
			
				Entrypt.loadswfObject("mvc/view/front/order/component/commit/CommitOrderPanel"+Config.SUBFFIX,loadswfCompleteHandler,this);
//				WindowProxy.getInstance().getModuleWindow("mvc/view/front/order/component/commit/CommitOrderPanel.swf",{method:"modify",item:o},null);
			}
			private function loadswfCompleteHandler(evt:Event):void{
				//			shopPage_id.loadModule("ProductShowPanel.swf",Entrypt.uncompress(evt.target.data as ByteArray,this.parentApplication.KEY));
				//				shopPage_id.loadModule("ProductShowPanel.swf",evt.target.data as ByteArray);
				var o:Order=order_id.selectedItem as Order;
//				Alert.show(o._orderAddress.receiveName);
				if(Config.SUBFFIX==Config.FLAG)
					WindowProxy.getInstance().getModuleWindow("CommitOrderPanel.swf",evt.target.data as ByteArray,{method:"modify",item:o,type:"showtype",modifyindex:order_id.selectedIndex},this,false);
					else
				WindowProxy.getInstance().getModuleWindow("CommitOrderPanel.swf",Entrypt.uncompress(evt.target.data as ByteArray,this.parentApplication.KEY),{method:"modify",item:o,type:"showtype",modifyindex:order_id.selectedIndex},this,false);
			}
			public function pay_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
//				WindowProxy.getInstance().getPopWindow("mvc/view/front/order/component/show/Alipay.swf",this);
			      parentDocument.pay_clickHandler(order_id.selectedItem as Order);
			}
			
			public function removePayOrder():void{
				orders.removeItemAt(orders.getItemIndex(order_id.selectedItem));
			}
			public function cancel_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				//				this.parentDocument.showOrderDetail(order_id.selectedItem as Order);
				
				//				WindowProxy.getInstance().getModuleWindow("mvc/view/front/order/component/commit/CommitOrderPanel.swf",{method:"modify",item:o},null);
				var proxy:OrderProxy=ControllerService.getInstance(ControllerCommand.ORDER_PROXY);
				var condition:Object=new Object();
				condition._sid=this.parentApplication.PRIVATEKEY;
				condition.id=order_id.selectedItem.id;
				proxy.del(condition,delOrderResultHandler);
			}
			
			private function delOrderResultHandler(message:Message):void{
				
				if(message.messageSucess==1){
					removePayOrder();
				}
				Alert.show(message.messageBody,"提示");
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<mx:DataGrid height="100%" dataProvider="{orders}" width="100%" id="order_id" sortableColumns="false">
		<mx:columns>
			<mx:DataGridColumn headerText="订单编号" dataField="out_trade_no"/>
			<mx:DataGridColumn headerText="提交时间" dataField="createDate"/>
			<mx:DataGridColumn headerText="配送方式" dataField="getway">
				<mx:itemRenderer>
					<fx:Component>
						<mx:Label updateComplete="label1_updateCompleteHandler(event,data)">
							<fx:Script>
								<![CDATA[
									import mx.events.FlexEvent;
									protected function label1_updateCompleteHandler(event:FlexEvent,obj:Object):void
									{
										// TODO Auto-generated method stub
										if(obj.getway==0){
											this.text="买主上门自提";
										}else if(obj.getway==2){
											this.text="快递方式";
										}
									}
								]]>
							</fx:Script>
						</mx:Label>

					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
			<mx:DataGridColumn headerText="总重量" dataField="totalweight"/>
			<mx:DataGridColumn headerText="总金额" dataField="totalmoney"/>
			<mx:DataGridColumn headerText="操作" >
				<mx:itemRenderer>
					<fx:Component>
						<mx:Button label="付款" click="outerDocument.pay_clickHandler(event)">
						</mx:Button>
						
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
			<mx:DataGridColumn headerText="操作">
				<mx:itemRenderer>
					<fx:Component>
						<mx:Button label="详情"  click="outerDocument.detail_clickHandler(event)"/>
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
			<mx:DataGridColumn headerText="操作">
				<mx:itemRenderer>
					<fx:Component>
						<mx:Button label="取消" click="outerDocument.cancel_clickHandler(event)"/>
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
		</mx:columns>
	</mx:DataGrid>
</mx:VBox>
